April 27, 2020

1:42 PM - 2:42 PM (1 hr)

Looked at williams book for potential lock free data structure
to implement for project. Read majority of chapter 7 (wow).

Decided to design a lock-free priority queue.


April 28, 2020

6:30 PM -8:00 PM (1.5 hrs)

Read paper 

(http://www.non-blocking.com/download/SunT03_PQueue_TR.pdf) 

to get a start on an implementation of a lock-free data structure. This paper uses
a skip list to implement the priority queue. Looked at basics of skip list and 
began implementing the data structure.


May 1, 2020

4:30 PM - 5:30 PM (1 hr)

Writing/testing the serial implmentation of the skiplist class. Debugging error related to 
tail of skiplist

8:30 PM - 9:30 PM (1 hr)

Debugging and testing serial implementation of skiplist class for insertion
and lookup. Ensured data is in increasing order (this will be a min priority queue).

9:30 PM - 11:30 PM (2 hr)

Finished implementing remove and testing the serial skiplist implementation. 

May 3, 2020

2:00 PM - 3:00 PM (1 hr)

Found segfault bug related to updating the size of the skiplist after removal. Fixed this
and tested the removal of items.

3:00 PM - 4:00 PM (1hr)

Began implementing the design presented in the paper. Also reading 
over paper again to solidify understanding.

Week 1 Total Time: 8.5 hrs

Reflection on first week:
My first week consisted of familiarizing myself with the skiplist data structure by implementing it. 
Throughout this week I also looked over a paper (http://www.non-blocking.com/download/SunT03_PQueue_TR.pdf) 
--and a more updated version (cse.chalmers.se/~tsigas/papers/JPDC-Lock-free-skip-lists-and-Queues.pdf)--that 
presented a design for the lock-free concurrent priority queue.


May 4, 2020

1:00 PM - 2:00 PM (1 hr)

Redid the node structure to conform to the paper's design, changed the signatures of 
the class methods and implemented insert and delete min

May 5, 2020

12:15 PM - 2:15 PM (2 hr)

Discussed CAS bug with Professor Linderman and implemented changes to use PQLink's
`w' field for the compare and swap. Also implemented masking to extract the pointer 
and the boolean set flag. 

I made use of the uintptr_t for the size of the pointer because I felt that this was explicit.
I could have made use of size_t as well.

May 6, 2020

11:00 AM - 12:00 PM (1 hr)

Setup correctness tests for benchmarking against the STL PQ. Found segfault/infinite loop depending 
on changes made to the push and pop methods. Started debugging in gdb.

12:00 PM - 1:00 PM (1 hr)

Went to office hours for some help understanding the way the paper manipulated marking pointers.
Changed the structure of the Link unions to avoid making them to large for the CAS operation.

May 11, 2020

1:00 PM - 4:00 PM (3 hr)

Continued to debug also went into office hours for debugging help (using gdb for this). 
Infinite loop issue related to scanKey and readNext. Was incorrectly initializing the head and tail 
pointer as well. Got help interpreting pseudocode and fixed infinite while loop bugs. 

May 12, 2020

11:00 AM - 1:00 PM (2 hr)

Continued implementing correctness tests and found that both push and pop work correctly. Ran tests
against a custom stl priority queue. Discussed results in office hours and determined next steps. These
consisted of implementing the CoarseGrainPQ class that used a global lock to protect the stl pq. 

Total: 10 hrs

Reflection of second week:
My second week consisted of getting my hands really dirty with the implementation of the design. I had faced several design choices myself and I wished there were more details presented in the paper. While I recorded 10 hrs here, I know that I put in more but I did not record them. The remaining hours I spent consisted of testing different numbers of insertions and trying to find why my implementation was performing so poorly against the implementation from in the paper. I could not see theirs but the results were shown. I started by looking at procedures that were not elaborated on. For example,
randomLevel() was described in the paper but they may have used a "faster" method for generating the random numbers. I also experimented with removing the function calls to "useless" methods. I did not implement the memory management methods that they talked about. But I included them anyways for the sake of consistency.

Overall this was a sick project.
